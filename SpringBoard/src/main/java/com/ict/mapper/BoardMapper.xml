<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http:/mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.mapper.BoardMapper">
	<!--  조건문에 의한 동적쿼리를 반복해서 사용하기 위해 sql태그를 사용합니다. -->
		<sql id = "search">
			<if test="searchType != null">
				<if test="searchType == 't'.toString()">
					(TITLE like '%'|| #{keyword} || '%') AND
				</if>
				<if test="searchType == 'c'.toString()">
					(CONTENT like '%' || #{keyword} || '%') AND
				</if>
				<if test="searchType == 'w'.toString()">
					(WRITER like '%' || #{keyword} || '%') AND
				</if>
				<if test="searchType == 'tc'.toString()">
					((TITLE like '%' || #{keyword} || '%')
						OR
					(CONTENT like '%' || #{keyword} || '%')) AND
				</if>
				<if test="searchType == 'cw'.toString()">
					((CONTENT like '%' || #{keyword} || '%')
						OR
					(WRITER like '%' || #{keyword} || '%')) AND
				</if>
				<if test="searchType == 'tcw'.toString()">
					((TITLE like '%' || #{keyword} || '%')
						OR
					(CONTENT like '%' || #{keyword} || '%')
						OR
					(WRITER like '%' || #{keyword} || '%')) AND
				</if>
			</if>
		</sql>
	
	
	<select id="getList" resultType="com.ict.persistence.BoardVO">
		<!-- <이나 >과 같이 태그로 오인될 수 있는 문자를 포함하는
		쿼리문은 그냥 작성하지 않고, CDATA를 이용합니다.
		아래와 같이 <![CDATA[ 실행문 ]]> 과 같이
		실행문을 CDATA 내부에 작성하면
		내부의 부등호는 전부 문자로 간주합니다. -->
		<!-- *로 조회하면 rn까지 포함하므로 깔끔하게 rn없이 출력하도록
		조회컬럼을 작성합니다. -->
		<!-- 수정을 위해 조건에 구애받지 않는 공통쿼리와
		조건별로 추가해야하는 조건별 쿼리는 따로 지정합니다. -->
		<![CDATA[
		SELECT * FROM
			(SELECT 
			/*+ INDEX_DESC(board_tbl pk_board) */
			rownum rn, board_tbl.* FROM board_tbl
				WHERE 
				
		]]>
		
		<!-- 동적쿼리조건이 들어올 자리 -->
		<include refid="search"></include>
		
		<!-- 아래부터는 MySQL의 Limit와 같은 역할을 하는 부분 -->		
		<![CDATA[		
			rownum <=(${page} * 10))
			WHERE rn > (${page} - 1) * 10
		]]>
	</select>
	
	<!-- 현재 insert는 BoardVO를 파라미터로 받고 있습니다. 
	이 경우, VO 내부 변수를 #{변수명} 으로 쿼리문에 전달할 수 있습니다.
	${변수명} 이 아님을 주의해주세요.
	
	현재 로직으로 bno에 들어갈 값을 미리 알 수 없으므로, insert구문 실행 이전에 select key로 
	미리 값을 구하고 전달하는 식으로 활용해야 합니다.-->
	<insert id="insert">
		<selectKey keyProperty="bno" resultType="long" order="BEFORE">
			SELECT board_num.nextval FROM dual;
		</selectKey>
		INSERT INTO board_tbl (bno, title, content, writer)
			VALUES
		(#{bno}, #{title}, #{content}, #{writer})
	</insert>
	
	<delete id="delete">
		DELETE FROM board_tbl WHERE bno = #{bno}
	</delete>
	
	<update id="update">
		UPDATE board_tbl 
			SET 
		title=#{title}, content=#{content}, 
		writer=#{writer}, updatedate=SYSDATE
			WHERE bno = #{bno}
	</update>
	
	<select id="getDetail" resultType="com.ict.persistence.BoardVO">
		SELECT * FROM board_tbl WHERE bno = #{bno}
	</select>

	<select id="getBoardCount" resultType="long">
		
			SELECT COUNT(*) FROM board_tbl WHERE
	
			<include refid="search"></include>
			<!--  조건이 없을 때도 WHERE절 뒤에 
			뭔가 붙여야 하므로 bno가 0보다 큰 경우로 -->
			bno > 0
	</select>
	
	<update id = "updateReplyCount">
		UPDATE board_tbl
			SET
		replycount = replycount + #{amount} WHERE bno = #{bno}
	</update>


</mapper>