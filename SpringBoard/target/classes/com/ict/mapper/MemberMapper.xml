<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http:/mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.mapper.MemberMapper">

	<!-- 맴버변수의 이름과 DB컬럼의 이름이 일치하지 않을 때 resultMap을 사용해주세요 -->
	<!--List는 collection으로 받고 result는 단일 변수들을 받습니다. -->
	<resultMap type="com.ict.domain.MemberVO" id="memberMap">
		<!--  조인 등으로 기존 VO와 구조가 다른 데이터가 리턴되는 경우 resultMap으로 묶습니다.
		result의 property에는 VO의 변수명, column은 DB상의 컬럼명을 넣습니다.
		이러면 VO의 변수명과 DB상의 컬럼명이 달라도 매칭이 됩니다.
		 -->
		 <id property="userId" column="userid"/>
		 <result property="userId" column="userid"/>
		 <result property="userPw" column="userpw"/>
		 <result property="userName" column="username"/>
		 <result property="regDate" column="regdate"/>
		 <result property="updateDate" column="updatedate"/>
		 <collection property="authList" resultMap="authMap">
		 </collection>
	</resultMap>

	<resultMap type="com.ict.domain.AuthVO" id="authMap">
		<result property="userId" column="userid"/>
		<result property="auth" column="auth"/>
	</resultMap>		
	
	<select id="read" resultMap="memberMap">
		SELECT
			m.userid, userpw, username, enabled, regdate, updatedate, a.auth
				FROM
			member_tbl m LEFT OUTER JOIN member_auth a on m.userid = a.userid
				WHERE
			m.userid = #{userId}
	</select>
	
	<insert id="insertMemberTbl">
		INSERT INTO member_tbl(userid, userpw, username)
			VALUES
		(#{userId}, #{userPw}, #{userName})
	</insert>
	
	<update id="insertMemberAuth">
		INSERT ALL
		<foreach collection="authList" item="item" separator=" ">
			INTO member_auth(userid, auth)
				VALUES
			(#{item.userId}, #{item.auth})
		</foreach>
		SELECT *
			FROM DUAL
	</update>
		
</mapper>



